# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="robbyrussell"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)


# ENABLE_CORRECTION="true"

COMPLETION_WAITING_DOTS="true"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

plugins=(git sudo aliases history fzf vi-mode python battery docker )

source /usr/share/wikiman/widgets/widget.zsh
source /usr/share/doc/git-extras/git-extras-completion.zsh
source $ZSH/oh-my-zsh.sh
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
source ~/.zsh/catppuccin_mocha-zsh-syntax-highlighting.zsh
source /usr/share/nvm/init-nvm.sh
source /usr/share/zsh/plugins/zsh-you-should-use/you-should-use.plugin.zsh
# source /usr/share/zsh/plugins/zsh-eza/zsh-eza.plugin.zsh
source /usr/share/zsh/plugins/zsh-auto-notify/auto-notify.plugin.zsh
# source /usr/share/zsh/plugins/zsh-vi-mode/zsh-vi-mode.zsh
# source /usr/share/zsh/plugins/zsh-sudo/sudo.plugin.zsh
# source /usr/share/zsh/plugins/zsh-fzf-plugin/fzf.plugin.zsh

# -------------------  Environment Variables -------------------
export ANDROID_HOME=$HOME/Android/Sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/platform-tools
export DOCKER_HOST=unix:///var/run/docker.sock  
export YSU_MESSAGE_POSITION="after"
export ZOXIDE_CMD_OVERRIDE="cd"
export EDITOR=nvim
export BROWSER=google-chrome
export FZF_DEFAULT_OPTS="--inline-info --bind 'ctrl-/:change-preview-window(hidden|)'  --wrap --wrap-sign='↳ ' "
export SHELL=/usr/bin/zsh

# ----- Dracula Man theme -----
export MANPAGER="/usr/bin/less -s -M +Gg"

export LESS_TERMCAP_mb=$'\e[1;31m'      # begin bold
export LESS_TERMCAP_md=$'\e[1;34m'      # begin blink
export LESS_TERMCAP_so=$'\e[01;45;37m'  # begin reverse video
export LESS_TERMCAP_us=$'\e[01;36m'     # begin underline
export LESS_TERMCAP_me=$'\e[0m'         # reset bold/blink
export LESS_TERMCAP_se=$'\e[0m'         # reset reverse video
export LESS_TERMCAP_ue=$'\e[0m'         # reset underline
export GROFF_NO_SGR=1                   # for konsole


# ------- aliases -------------
alias get_web="wget --mirror --convert-links --adjust-extension --page-requisites --no-parent"
alias l="eza -la --icons=always"
alias la="l"
alias ll="eza -l --icons=always"
alias ls="eza --icons=always"
alias ld="eza -Da --icons=always"
alias lt="eza --tree --icons=always --level 2"
alias sl="sl -Ge"
alias nvchad="NVIM_APPNAME=NvChad nvim"
alias nvim-adib="NVIM_APPNAME=adib nvim"

alias y="yazi"
alias lg="lazygit"
alias c="clear"
alias open="xdg-open"
alias v="nvim"
alias -g -- -h='-h 2>&1 | bat --language=help --style=plain'
alias -g -- --help='--help 2>&1 | bat --language=help --style=plain'
alias so="exec zsh"

bindkey -s '^[r' "so\n"
bindkey -s '^B' "btop\n"
bindkey -s '^Y' "yazi\n"



function command_not_found_handler {
  local purple='\e[1;35m' bright='\e[0;1m' green='\e[1;32m' reset='\e[0m'
  printf 'zsh: command not found: %s\n' "$1"
  local entries=( ${(f)"$(/usr/bin/pacman -F --machinereadable -- "/usr/bin/$1")"} )
  if (( ${#entries[@]} )) ; then
    printf "${bright}$1${reset} may be found in the following packages:\n"
    local pkg
    for entry in "${entries[@]}" ; do
      local fields=( ${(0)entry} )
      if [[ "$pkg" != "${fields[2]}" ]]; then
        printf "${purple}%s/${bright}%s ${green}%s${reset}\n" "${fields[1]}" "${fields[2]}" "${fields[3]}"
      fi
      printf '    /%s\n' "${fields[4]}"
      pkg="${fields[2]}"
    done
  fi
  return 127
}

ts () {
  # If no query is passed, use an empty string
  local query="${1:-}"

  # Use fzf with the specified query or an empty string
  local choice=$(tldr --list | sed 's/ (en)//g' | sort | uniq | fzf --preview="tldr {}" --reverse --query="$query" --preview-window=80% --preview-label='[ preview-window ]' --cycle --bind 'ctrl-/:change-preview-window(hidden|)' --wrap --wrap-sign='↳ ' --preview-window=border-bold --info=inline --bold)

  if [[ -z $choice ]]; then
    echo "Nothing Selected"
    return 127
  fi

  tldr --color "$choice"
}

inspac () {
  if [[ $(nmcli networking connectivity) != "none" ]];then
    paru -Slq | fzf-tmux --multi --preview 'paru -Si {1}' --height=~50% --preview-window=70%| xargs -ro paru -S;
  else
    echo "No network connection!";
    return 1;
  fi
}

delpac() {
  paru -Qq | fzf-tmux --multi --preview 'paru -Qi {1}' --height=~50%| xargs -ro paru -Rns
}


eval "$(starship init zsh)"
eval "$(zoxide init zsh)"
eval "$(fzf --zsh)"
eval "$(zoxide init --cmd cd zsh)"
AUTO_NOTIFY_IGNORE+=("docker" "man" "xdg-open" "code" "btop" "lazygit" "yazi" "tmux" "tty-clock" "cava" "pipes.sh" "toipe" "git" "ts" "less" "batman" "batdiff" "fish" "bash" "python3" "python" "zsh")


# ------------------ fzf config --------------------------------------------
export FZF_CTRL_T_OPTS="--preview '~/fzf-preview.sh {}' --bind 'ctrl-/:change-preview-window(hidden|)' --wrap --wrap-sign='↳ ' --height=60% --ansi"
export FZF_ALT_C_OPTS="--preview 'eza -G --color=always {}' --border sharp --bind 'ctrl-/:change-preview-window(hidden|)' --wrap --wrap-sign='↳ ' --height=50% --preview-window down,20%,border-sharp"

_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview "eza --tree --icons --color=always -a {} | head -200 " "$@" ;;
    export|unset) fzf --preview "eval 'echo \$' {}"     "$@" ;;
    ssh)          fzf --preview "dig {}"    "$@" ;;
    unalias)      fzf --preview "alias {}"   "$@"  ;;
    *)            fzf --preview "~/fzf-preview.sh {}"  "$@" ;;
  esac
}


# -- FZF
export FZF_DEFAULT_COMMAND="fd --hidden --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type=d  --hidden --strip-cwd-prefix --exclude .git"

_fzf_compgen_path() {
  fd --hidden --exclude .git . "$1"
}

_fzf_comprun_dir() {
  fd --type=d --hidden --exclude .git . "$1"
}

echo -e "\033[32m$(fortune -s)\033[0m"

# typeset -g POWERLEVEL9K_INSTANT_PROMPT=off

source ~/fzf-git.sh
export PATH=$PATH:~/.local/bin
